// -*- mode: Rust -*-

// AUTOGENERATED BY glean_parser v15.0.0. DO NOT EDIT. DO NOT COMMIT.

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
pub mod autotrack_fafo {
    #[allow(unused_imports)] // HistogramType might be unusued, let's avoid warnings
    use glean::{
        private::*, traits::ExtraKeys, traits::NoExtraKeys, CommonMetricData, HistogramType,
        LabeledMetricData, Lifetime, MemoryUnit, TimeUnit,
    };

    #[allow(non_upper_case_globals, dead_code)]
    /// generated from autotrack.fafo.client_id
    ///
    /// A unique UUID based identifier (usually the client ID)
    pub static client_id: ::glean::private::__export::Lazy<UuidMetric> =
        ::glean::private::__export::Lazy::new(|| {
            let meta = CommonMetricData {
                category: "autotrack.fafo".into(),
                name: "client_id".into(),
                send_in_pings: vec!["metrics".into()],
                lifetime: Lifetime::Ping,
                disabled: false,
                ..Default::default()
            };
            UuidMetric::new(meta)
        });

    #[allow(non_upper_case_globals, dead_code)]
    /// generated from autotrack.fafo.count
    ///
    /// a singular incrementing count value up to i32::max()
    pub static count: ::glean::private::__export::Lazy<CounterMetric> =
        ::glean::private::__export::Lazy::new(|| {
            let meta = CommonMetricData {
                category: "autotrack.fafo".into(),
                name: "count".into(),
                send_in_pings: vec!["metrics".into()],
                lifetime: Lifetime::Ping,
                disabled: false,
                ..Default::default()
            };
            CounterMetric::new(meta)
        });

    #[allow(non_upper_case_globals, dead_code)]
    /// generated from autotrack.fafo.datetime
    ///
    /// Record a specific date
    pub static datetime: ::glean::private::__export::Lazy<DatetimeMetric> =
        ::glean::private::__export::Lazy::new(|| {
            let meta = CommonMetricData {
                category: "autotrack.fafo".into(),
                name: "datetime".into(),
                send_in_pings: vec!["metrics".into()],
                lifetime: Lifetime::Ping,
                disabled: false,
                ..Default::default()
            };
            DatetimeMetric::new(meta, TimeUnit::Millisecond)
        });

    #[allow(non_upper_case_globals, dead_code)]
    /// generated from autotrack.fafo.event
    ///
    /// Look, they did a thing!

    pub static event: ::glean::private::__export::Lazy<EventMetric<NoExtraKeys>> =
        ::glean::private::__export::Lazy::new(|| {
            let meta = CommonMetricData {
                category: "autotrack.fafo".into(),
                name: "event".into(),
                send_in_pings: vec!["events".into()],
                lifetime: Lifetime::Ping,
                disabled: false,
                ..Default::default()
            };
            EventMetric::new(meta)
        });

    #[allow(non_upper_case_globals, dead_code)]
    /// generated from autotrack.fafo.labeled
    ///
    /// One of a set of incrementing counts identified by a max 71 char label up to
    /// i32::max()
    pub static labeled: ::glean::private::__export::Lazy<LabeledMetric<CounterMetric>> =
        ::glean::private::__export::Lazy::new(|| {
            let meta = LabeledMetricData::Common {
                cmd: CommonMetricData {
                    category: "autotrack.fafo".into(),
                    name: "labeled".into(),
                    send_in_pings: vec!["metrics".into()],
                    lifetime: Lifetime::Ping,
                    disabled: false,
                    ..Default::default()
                },
            };
            LabeledMetric::new(
                meta,
                Some(vec![
                    ::std::borrow::Cow::from("other_label"),
                    ::std::borrow::Cow::from("some_label"),
                ]),
            )
        });

    #[allow(non_upper_case_globals, dead_code)]
    /// generated from autotrack.fafo.labeled_bool
    ///
    /// One of a set of booleans that are identified by a max 71 character label
    pub static labeled_bool: ::glean::private::__export::Lazy<LabeledMetric<BooleanMetric>> =
        ::glean::private::__export::Lazy::new(|| {
            let meta = LabeledMetricData::Common {
                cmd: CommonMetricData {
                    category: "autotrack.fafo".into(),
                    name: "labeled_bool".into(),
                    send_in_pings: vec!["metrics".into()],
                    lifetime: Lifetime::Ping,
                    disabled: false,
                    ..Default::default()
                },
            };
            LabeledMetric::new(
                meta,
                Some(vec![
                    ::std::borrow::Cow::from("other_label"),
                    ::std::borrow::Cow::from("some_label"),
                ]),
            )
        });

    #[allow(non_upper_case_globals, dead_code)]
    /// generated from autotrack.fafo.labeled_string
    ///
    /// max 100 octet string with max 71 char dynamic (<16#) or static (<100#) labels
    pub static labeled_string: ::glean::private::__export::Lazy<LabeledMetric<StringMetric>> =
        ::glean::private::__export::Lazy::new(|| {
            let meta = LabeledMetricData::Common {
                cmd: CommonMetricData {
                    category: "autotrack.fafo".into(),
                    name: "labeled_string".into(),
                    send_in_pings: vec!["metrics".into()],
                    lifetime: Lifetime::Ping,
                    disabled: false,
                    ..Default::default()
                },
            };
            LabeledMetric::new(meta, None)
        });

    #[allow(non_upper_case_globals, dead_code)]
    /// generated from autotrack.fafo.string
    ///
    /// max 255 octet string value (Use `text` if this is too small)
    pub static string: ::glean::private::__export::Lazy<StringMetric> =
        ::glean::private::__export::Lazy::new(|| {
            let meta = CommonMetricData {
                category: "autotrack.fafo".into(),
                name: "string".into(),
                send_in_pings: vec!["metrics".into()],
                lifetime: Lifetime::Ping,
                disabled: false,
                ..Default::default()
            };
            StringMetric::new(meta)
        });

    #[allow(non_upper_case_globals, dead_code)]
    /// generated from autotrack.fafo.timespan
    ///
    /// A short period of time recorded by calls to the object
    pub static timespan: ::glean::private::__export::Lazy<TimespanMetric> =
        ::glean::private::__export::Lazy::new(|| {
            let meta = CommonMetricData {
                category: "autotrack.fafo".into(),
                name: "timespan".into(),
                send_in_pings: vec!["metrics".into()],
                lifetime: Lifetime::Ping,
                disabled: false,
                ..Default::default()
            };
            TimespanMetric::new(meta, TimeUnit::Millisecond)
        });
}
