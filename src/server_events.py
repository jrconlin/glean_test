"""
This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at http://mozilla.org/MPL/2.0/.

AUTOGENERATED BY glean_parser v15.0.1. DO NOT EDIT. DO NOT COMMIT.
"""

from __future__ import annotations
from datetime import datetime, timezone
from typing import Any
from uuid import uuid4
import json

GLEAN_EVENT_MOZLOG_TYPE = "glean-server-event"


class MetricsServerEventLogger:
    def __init__(
        self, application_id: str, app_display_version: str, channel: str
    ) -> None:
        """
        Create MetricsServerEventLogger instance.

        :param str application_id: The application ID.
        :param str app_display_version: The application display version.
        :param str channel: The channel.
        """
        self._application_id = application_id
        self._app_display_version = app_display_version
        self._channel = channel

    def _record(
        self,
        user_agent: str,
        ip_address: str,
        autotrack_first_quantity: int,
        autotrack_second_quantity: int,
        autotrack_first_string: str,
        autotrack_second_string: str,
        event: dict[str, Any]
    ) -> None:
        now = datetime.now(timezone.utc)
        timestamp = now.isoformat()
        event["timestamp"] = int(1000.0 * now.timestamp())  # Milliseconds since epoch
        event_payload = {
            "metrics": {
                "quantity": {
                    "autotrack.first_quantity": autotrack_first_quantity,
                    "autotrack.second_quantity": autotrack_second_quantity,
                },
                "string": {
                    "autotrack.first_string": autotrack_first_string,
                    "autotrack.second_string": autotrack_second_string,
                },
            },
            "events": [event],
            "ping_info": {
                # seq is required in the Glean schema, however is not useful in server context
                "seq": 0,
                "start_time": timestamp,
                "end_time": timestamp,
            },
            # `Unknown` fields below are required in the Glean schema, however they are
            # not useful in server context
            "client_info": {
                "telemetry_sdk_build": "glean_parser v15.0.1",
                "first_run_date": "Unknown",
                "os": "Unknown",
                "os_version": "Unknown",
                "architecture": "Unknown",
                "app_build": "Unknown",
                "app_display_version": self._app_display_version,
                "app_channel": self._channel,
            },
        }
        event_payload_serialized = json.dumps(event_payload)

        # This is the message structure that Decoder expects:
        # https://github.com/mozilla/gcp-ingestion/pull/2400
        ping = {
            "document_namespace": self._application_id,
            "document_type": "metrics",
            "document_version": "1",
            "document_id": str(uuid4()),
            "user_agent": user_agent,
            "ip_address": ip_address,
            "payload": event_payload_serialized,
        }


        self.emit_record(now, ping)

    def emit_record(self, now: datetime, ping:dict[str, Any]) -> None:
        """Log the ping to STDOUT.
        Applications might want to override this method to use their own logging.
        If doing so, make sure to log the ping as JSON, and to include the
        `Type: GLEAN_EVENT_MOZLOG_TYPE`."""
        ping_envelope = {
            "Timestamp": now.isoformat(),
            "Logger": "glean",
            "Type": GLEAN_EVENT_MOZLOG_TYPE,
            "Fields": ping,
        }
        ping_envelope_serialized = json.dumps(ping_envelope)

        print(ping_envelope_serialized)

    def record_autotrack_another_event(
        self,
        user_agent: str,
        ip_address: str,
        autotrack_first_quantity: int,
        autotrack_second_quantity: int,
        autotrack_first_string: str,
        autotrack_second_string: str,
    ) -> None:
        """
        Record and submit a autotrack_another_event event:
        Look, they did a thing!
        Event is logged to STDOUT via `print`.

        :param str user_agent: The user agent.
        :param str ip_address: The IP address. Will be used to decode Geo information
            and scrubbed at ingestion.
        :param int autotrack_first_quantity: Some quant that is worth quanting
        :param int autotrack_second_quantity: Some quant that is worth quanting
        :param str autotrack_first_string: max 255 octet string value (Use `text` if this is too small)
        :param str autotrack_second_string: max 255 octet string value (Use `text` if this is too small)
        """
        event = {
            "category": "autotrack",
            "name": "another_event",
        }
        self._record(
            user_agent,
            ip_address,
            autotrack_first_quantity,
            autotrack_second_quantity,
            autotrack_first_string,
            autotrack_second_string,
            event
        )
    def record_autotrack_some_event(
        self,
        user_agent: str,
        ip_address: str,
        autotrack_first_quantity: int,
        autotrack_second_quantity: int,
        autotrack_first_string: str,
        autotrack_second_string: str,
    ) -> None:
        """
        Record and submit a autotrack_some_event event:
        Look, they did a thing!
        Event is logged to STDOUT via `print`.

        :param str user_agent: The user agent.
        :param str ip_address: The IP address. Will be used to decode Geo information
            and scrubbed at ingestion.
        :param int autotrack_first_quantity: Some quant that is worth quanting
        :param int autotrack_second_quantity: Some quant that is worth quanting
        :param str autotrack_first_string: max 255 octet string value (Use `text` if this is too small)
        :param str autotrack_second_string: max 255 octet string value (Use `text` if this is too small)
        """
        event = {
            "category": "autotrack",
            "name": "some_event",
        }
        self._record(
            user_agent,
            ip_address,
            autotrack_first_quantity,
            autotrack_second_quantity,
            autotrack_first_string,
            autotrack_second_string,
            event
        )

def create_metrics_server_event_logger(
    application_id: str,
    app_display_version: str,
    channel: str,
) -> MetricsServerEventLogger:
    """
    Factory function that creates an instance of Glean Server Event Logger to record
    `metrics` ping events.
    :param str application_id: The application ID.
    :param str app_display_version: The application display version.
    :param str channel: The channel.
    :return: An instance of MetricsServerEventLogger.
    :rtype: MetricsServerEventLogger
    """
    return MetricsServerEventLogger(application_id, app_display_version, channel)
